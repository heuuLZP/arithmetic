(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{356:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"位置匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置匹配"}},[t._v("#")]),t._v(" 位置匹配")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("锚")]),t._v(" "),a("th",[t._v("位置")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("^")])]),t._v(" "),a("td",[t._v("开头，多行的每一行开头")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$")])]),t._v(" "),a("td",[t._v("结尾，多行的每一行结尾")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\b")])]),t._v(" "),a("td",[t._v("单词边界：[_0-9a-zA-Z] 和 非 [_0-9a-zA-Z] 之间的位置")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\B")])]),t._v(" "),a("td",[t._v("排除 \\b 匹配的位置后剩下的位置")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("(?=p)")])]),t._v(" "),a("td",[t._v("正向先行断言：p 前面的位置")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("(?!p)")])]),t._v(" "),a("td",[t._v("负向先行断言：不是 p 前面的位置")])])])]),t._v(" "),a("h2",{attrs:{id:"一、-和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、-和"}},[t._v("#")]),t._v(" 一、"),a("code",[t._v("^")]),t._v(" 和 "),a("code",[t._v("$")])]),t._v(" "),a("p",[a("code",[t._v("^")]),t._v(" 在正则表达式中有两种用法：")]),t._v(" "),a("ul",[a("li",[t._v("字符组中使用"),a("br"),t._v("\n表示排除某些字符")]),t._v(" "),a("li",[t._v("非字符组中使用"),a("br"),t._v("\n表示位置匹配")])]),t._v(" "),a("h2",{attrs:{id:"二、-b-和-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、-b-和-b"}},[t._v("#")]),t._v(" 二、"),a("code",[t._v("\\b")]),t._v(" 和 "),a("code",[t._v("\\B")])]),t._v(" "),a("p",[t._v("谨慎使用 "),a("code",[t._v("\\b")]),t._v(" 和 "),a("code",[t._v("\\B")]),t._v("，通常字符串中会匹配到多个单词边界。")]),t._v(" "),a("h2",{attrs:{id:"三、-p-和-p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、-p-和-p"}},[t._v("#")]),t._v(" 三、"),a("code",[t._v("(?=p)")]),t._v(" 和 "),a("code",[t._v("(?!p)")])]),t._v(" "),a("p",[t._v("这里的问题是，每次看完先行断言的知识点，很快就忘记了。\n建议通过一些例子来熟悉先行断言的用法。")]),t._v(" "),a("h2",{attrs:{id:"四、位置的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、位置的特性"}},[t._v("#")]),t._v(" 四、位置的特性")]),t._v(" "),a("p",[t._v("可以把位置理解成空字符 "),a("code",[t._v('""')])]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：\n是空字符，不是空格，两者的含义是不一样的。")]),t._v(" "),a("h2",{attrs:{id:"五、数字的千位分隔符表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、数字的千位分隔符表示法"}},[t._v("#")]),t._v(" 五、数字的千位分隔符表示法")]),t._v(" "),a("p",[t._v('把 "12345678", 变成"12,345,678"')]),t._v(" "),a("h4",{attrs:{id:"_5-1-最后一个逗号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-最后一个逗号"}},[t._v("#")]),t._v(" 5.1 最后一个逗号")]),t._v(" "),a("p",[t._v("找出最后一个逗号的位置：")]),t._v(" "),a("p",[t._v("最后一个逗号的位置，后面应该是3个数字，最后是末尾。")]),t._v(" "),a("p",[t._v("即：子模式应该是 "),a("code",[t._v("\\d{3}$")])]),t._v(" "),a("p",[t._v("🍬")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345678"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?=\\d{3}$)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "12345,678"')]),t._v("\n")])])]),a("h4",{attrs:{id:"_5-2-找出剩下的逗号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-找出剩下的逗号"}},[t._v("#")]),t._v(" 5.2 找出剩下的逗号")]),t._v(" "),a("p",[t._v("最后一个逗号的位置：后面应该是3个数字，最后是末尾。")]),t._v(" "),a("p",[t._v("可以用最笨的方式找规律：\n倒数第二个逗号的位置：后面应该是6个数字，最后是末尾。\n倒数第三个逗号的位置：后面应该是9个数字，最后是末尾。")]),t._v(" "),a("p",[t._v("可以发现通用的规律是：\n每个逗号的位置：后面应该是 "),a("code",[t._v("n * 3")]),t._v(" 个数字，最后是末尾。")]),t._v(" "),a("p",[t._v("因为 "),a("code",[t._v("n >= 1")]),t._v(", 所以可以使用量词 "),a("code",[t._v("+")])]),t._v(" "),a("p",[t._v("即："),a("code",[t._v("(\\d{3})+$")])]),t._v(" "),a("p",[t._v("🍬")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345678"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?=(\\d{3})+$)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "12,345,678"')]),t._v("\n")])])]),a("p",[a("strong",[t._v("附加说明")])]),t._v(" "),a("p",[t._v("一个疑惑：逗号是怎么添加到字符串当中的，replace() 方法是怎么添加逗号的？(js 基础有待加强😭)")]),t._v(" "),a("ul",[a("li",[t._v("猜想1："),a("s",[t._v("找到所有的位置之后，再添加逗号")]),t._v("❌")]),t._v(" "),a("li",[t._v("猜想2：找到一个位置，添加逗号，在此基础上继续找下一个逗号❓")])]),t._v(" "),a("p",[t._v("这里猜想2是有歧义的：")]),t._v(" "),a("ul",[a("li",[t._v("理解方式1："),a("s",[t._v("针对原字符串，根据正则找到一个位置，在原字符串中添加逗号，然后针对原字符串继续找下一个逗号")]),t._v("❌")]),t._v(" "),a("li",[t._v("理解方式2：针对原字符串，根据正则找到一个位置，在新字符串中添加逗号，然后针对原字符串继续找下一个逗号")])]),t._v(" "),a("p",[t._v("理解方式1是错误的，因为 "),a("code",[t._v("replace()")]),t._v(" 方法是不会改变原字符串的。")]),t._v(" "),a("p",[t._v("所有的逗号都是在新的字符串上面添加，而根据正则表达式找位置，是针对于原字符串的，这点一定要想清楚。")]),t._v(" "),a("p",[t._v("完整的描述是：")]),t._v(" "),a("p",[t._v("针对原字符串，倒数第二个逗号的位置：后面应该是6个数字，最后是末尾。")]),t._v(" "),a("h4",{attrs:{id:"_5-3-边界处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-边界处理"}},[t._v("#")]),t._v(" 5.3 边界处理")]),t._v(" "),a("p",[t._v("刚才是从后往前找，但是这里有个容易被忽略的限制条件：")]),t._v(" "),a("p",[a("strong",[t._v("逗号的位置不能是开头")])]),t._v(" "),a("p",[t._v("🍬 没考虑边界时")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456789"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?=(\\d{3})+$)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ",123,456,789"')]),t._v("\n")])])]),a("p",[t._v("这里就用到了负向先行断言")]),t._v(" "),a("p",[a("code",[t._v("(?=^)")]),t._v(" 子模式是开头，匹配的就是开头前面的位置，但实际上可以认为就是开头，因为"),a("code",[t._v("开头")]),t._v("和"),a("code",[t._v("开头前面的位置")]),t._v(" 代表的是同一个位置，想想位置的特性，2个空字符和1个空字符实际上所占得空间是一样的。")]),t._v(" "),a("p",[t._v("因为"),a("code",[t._v("(?=^)")]),t._v("匹配的是开头，那么"),a("code",[t._v("(?!^)")]),t._v("就代表不是开头的位置")]),t._v(" "),a("p",[t._v("🍬")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456789"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?!^)(?=(\\d{3})+$)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "123,456,789"')]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);