(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{348:function(t,s,a){t.exports=a.p+"assets/img/regexp_1_01.817bdb9e.png"},357:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"字符匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符匹配"}},[t._v("#")]),t._v(" 字符匹配")]),t._v(" "),n("h2",{attrs:{id:"_1-1-横向模糊匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-横向模糊匹配"}},[t._v("#")]),t._v(" 1-1.横向模糊匹配")]),t._v(" "),n("blockquote",[n("p",[t._v("匹配不同长度的字符。")])]),t._v(" "),n("ul",[n("li",[t._v("量词")])]),t._v(" "),n("h2",{attrs:{id:"_1-2-纵向匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-纵向匹配"}},[t._v("#")]),t._v(" 1-2.纵向匹配")]),t._v(" "),n("blockquote",[n("p",[t._v("匹配不同的字符。")])]),t._v(" "),n("ul",[n("li",[t._v("元字符")]),t._v(" "),n("li",[t._v("字符组")])]),t._v(" "),n("h2",{attrs:{id:"_1-3-量词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-量词"}},[t._v("#")]),t._v(" 1-3.量词")]),t._v(" "),n("blockquote",[n("p",[t._v("{m,n} 最少出现 m 次，最多出现 n 次。")])]),t._v(" "),n("h2",{attrs:{id:"_1-4-贪婪匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-贪婪匹配"}},[t._v("#")]),t._v(" 1-4.贪婪匹配")]),t._v(" "),n("blockquote",[n("p",[t._v("尽可能匹配符合规则的出现次数最多字符")])]),t._v(" "),n("p",[t._v("部分量词是贪婪匹配的，比如：")]),t._v(" "),n("ul",[n("li",[t._v("{m, n} 注意 "),n("code",[t._v("m < n")])]),t._v(" "),n("li",[t._v("{m,}")]),t._v(" "),n("li",[t._v("?")]),t._v(" "),n("li",[t._v("+")]),t._v(" "),n("li",[t._v("*")])]),t._v(" "),n("p",[t._v("{m} 就不是贪婪匹配，因为该量词明确表示出现 m 次。")]),t._v(" "),n("h4",{attrs:{id:"例子分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子分析"}},[t._v("#")]),t._v(" 例子分析")]),t._v(" "),n("p",[t._v("🍬全局匹配")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2,5}/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 123 1234 12345 123456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["12", "123", "1234", "12345", "12345"]')]),t._v("\n")])])]),n("p",[t._v("🍬非全局匹配")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2,5}/")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 123 1234 12345 123456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["12", "123", "1234", "12345", "12345"]')]),t._v("\n")])])]),n("p",[t._v("以上两个例子的疑惑与解答：")]),t._v(" "),n("ol",[n("li",[t._v("例一中为什么匹配不到"),n("code",[t._v("23")]),t._v("、"),n("code",[t._v("234")]),t._v("、"),n("code",[t._v("456")]),t._v("这样的字符串")])]),t._v(" "),n("p",[t._v("有这个疑惑是因为对贪婪匹配和全局匹配的理解不够透彻。")]),t._v(" "),n("p",[t._v("分析：第一个例子的结果是贪婪匹配和全局匹配共同作用下的结果。")]),t._v(" "),n("ul",[n("li",[t._v("全局匹配的规则：匹配到第一个后，继续向下匹配，注意全局匹配是有顺序的。")]),t._v(" "),n("li",[t._v("在匹配每一个结果是，匹配出现次数最多的字符串。")])]),t._v(" "),n("p",[n("code",[t._v("\\d{2,5}")]),t._v(" 表示匹配出现2次到5次之间数字字符串，过程如下(下图是我个人理解，不一定准确。)：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(348),alt:"regexp_1_01"}})]),t._v(" "),n("p",[t._v("当执行到第二步时，因为第3个字符为空字符串，所以符合"),n("code",[t._v("\\d{2,5}")]),t._v(" 的字符串是 "),n("code",[t._v("12")]),t._v(";"),n("br"),t._v("\n因为是全局匹配，所以继续匹配下一个符合条件的字符串;"),n("br"),t._v("\n当执行到第三步时，因为第7个字符为空字符串，所以符合"),n("code",[t._v("\\d{2,5}")]),t._v(" 的字符串有 "),n("code",[t._v("12")]),t._v(" 或者 "),n("code",[t._v("123")]),t._v("，但是因为这里是贪婪匹配，所以最后匹配的是 "),n("code",[t._v("123")]),t._v("。")]),t._v(" "),n("p",[t._v("解答：通过上述分析，可以知道，在贪婪匹配情况，只会尽可能匹配出现次数多的，而不会匹配出现次数少的；\n另外因为全局匹配是按顺序的，一个字符是不能重复匹配的。")]),t._v(" "),n("p",[t._v("🍬 这个就可以匹配到 "),n("code",[t._v("456")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{3}/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 123 1234 12345 123456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// =>  ["123", "123", "123", "123", "456"]')]),t._v("\n")])])]),n("h2",{attrs:{id:"_1-5-惰性匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-惰性匹配"}},[t._v("#")]),t._v(" 1-5.惰性匹配")]),t._v(" "),n("blockquote",[n("p",[t._v("针对部分量词，可以理解成尽可能匹配符合规则的出现次数最少字符")])]),t._v(" "),n("p",[t._v("在量词后面加个"),n("code",[t._v("?")]),t._v("实现惰性匹配。例如:"),n("code",[t._v("{m,n}?")])]),t._v(" "),n("p",[t._v("🍬惰性匹配")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2,5}?/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 123 1234 12345 123456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// =>  ["12", "12", "12", "34", "12", "34", "12", "34", "56"]')]),t._v("\n")])])]),n("p",[t._v("分析：虽然规则"),n("code",[t._v("\\d{2,5}")]),t._v("可以匹配出现5次的字符，但是在惰性匹配作用下，只会匹配出现次数最少的，即出现2次的字符。"),n("br"),t._v("\n这里因为全局匹配的作用，以"),n("code",[t._v("1234")]),t._v(" 为例，当第一个"),n("code",[t._v("12")]),t._v("匹配完成，剩下的"),n("code",[t._v("34")]),t._v("还存在符合规则的结果，所以会继续匹配，"),n("code",[t._v("123456")]),t._v("也是同样的道理。")]),t._v(" "),n("h2",{attrs:{id:"_1-6-多选分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-多选分支"}},[t._v("#")]),t._v(" 1-6.多选分支")]),t._v(" "),n("p",[t._v("用"),n("code",[t._v("|")]),t._v("(管道符)分隔子模式，例如："),n("code",[t._v("(r1|r2|r3)")]),t._v(", 表示结果是符合其中规则之一。")]),t._v(" "),n("p",[t._v("多选分支是惰性匹配，即如果字符串符合"),n("code",[t._v("r1")]),t._v("和"),n("code",[t._v("r2")]),t._v("的规则，结果将是前面的规则 r1")]),t._v(" "),n("p",[t._v("🍬 短的在前")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/good|goodbye/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"goodbye"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["good"]')]),t._v("\n")])])]),n("p",[t._v("🍬 长的在前")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/goodbye|good/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"goodbye"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => ["goodbye"]')]),t._v("\n")])])]),n("p",[t._v("从这里可以看出，"),n("code",[t._v("惰性匹配")]),t._v("应该是更为抽象的定义："),n("strong",[t._v("当有多个规则时，匹配最前面的规则")])]),t._v(" "),n("p",[n("code",[t._v("\\d{2,5}")]),t._v(" 可以用多选分支表示成 "),n("code",[t._v("\\d{2}|\\d{3}|\\d{4}|\\d{5}")])]),t._v(" "),n("h4",{attrs:{id:"例子分析-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子分析-2"}},[t._v("#")]),t._v(" 例子分析")]),t._v(" "),n("p",[t._v("🍬 用多选分支表示 {m,n}")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{2}|\\d{3}|\\d{4}|\\d{5}/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 123 1234 12345 123456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// =>   ["12", "12", "12", "34", "12", "34", "12", "34", "56"]')]),t._v("\n")])])]),n("p",[t._v("分析：因为每个连续的数字字符串中，都有符合"),n("code",[t._v("\\d{2}")]),t._v("的字符串，所以不会再匹配"),n("code",[t._v("\\d{3}")]),t._v("、"),n("code",[t._v("\\d{4}")]),t._v("、"),n("code",[t._v("\\d{5}")])]),t._v(" "),n("p",[t._v("🍬改变顺序，把 5 放到最前面")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d{5}|\\d{3}|\\d{4}|\\d{2}/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 123 1234 12345 123456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// =>    ["12", "123", "123", "12345", "12345"]')]),t._v("\n")])])]),n("p",[t._v("分析：匹配顺序是"),n("code",[t._v("\\d{5}")]),t._v("、"),n("code",[t._v("\\d{3}")]),t._v("、"),n("code",[t._v("\\d{4}")]),t._v("、"),n("code",[t._v("\\d{2}")]),t._v("，所以对于连续的数字字符串，只要前面的规则满足，就不会再匹配剩下的规则。")]),t._v(" "),n("ul",[n("li",[t._v("以"),n("code",[t._v("12345")]),t._v(" 为例，符合"),n("code",[t._v("\\d{5}")]),t._v("，所以不再匹配"),n("code",[t._v("\\d{3}")]),t._v("、"),n("code",[t._v("\\d{4}")]),t._v("、"),n("code",[t._v("\\d{2}")])]),t._v(" "),n("li",[t._v("以"),n("code",[t._v("1234")]),t._v(" 为例，不符合"),n("code",[t._v("\\d{5}")]),t._v(", 符合"),n("code",[t._v("\\d{3}")]),t._v("，所以不再匹配"),n("code",[t._v("\\d{4}")]),t._v("、"),n("code",[t._v("\\d{2}")])]),t._v(" "),n("li",[t._v("以"),n("code",[t._v("123")]),t._v(" 为例，不符合"),n("code",[t._v("\\d{5}")]),t._v(", 符合"),n("code",[t._v("\\d{3}")]),t._v("，所以不再匹配"),n("code",[t._v("\\d{4}")]),t._v("、"),n("code",[t._v("\\d{2}")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);